{"version":3,"file":"stripeApiClient-Bk7_oynm.js","sources":["../../src/lib/stripeApiClient.ts"],"sourcesContent":["/**\n * Stripe API Client Service\n * FIXED: Proper client-side Stripe integration with real payment intent creation\n */\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport { supabase } from './supabase';\n\nconst supabaseProjectRef = import.meta.env.VITE_SUPABASE_PROJECT_REF?.trim();\nconst supabaseRestUrl = import.meta.env.VITE_SUPABASE_URL?.trim()?.replace(/\\/$/, '');\nconst resolveStripeFunctionBase = () => {\n  if (supabaseProjectRef) {\n    return `https://${supabaseProjectRef}.functions.supabase.co/stripe-payments`;\n  }\n\n  if (supabaseRestUrl) {\n    return `${supabaseRestUrl}/functions/v1/stripe-payments`;\n  }\n\n  console.warn('[StripeAPIClient] Missing Supabase configuration. Falling back to relative function path.');\n  return '/functions/v1/stripe-payments';\n};\n\n// Payment Intent types\ninterface PaymentIntentData {\n  amount: number;\n  currency: string;\n  capture_method: 'automatic' | 'manual';\n  booking_id: number;\n  user_id: string;\n  payment_method_id?: string;\n}\n\ninterface PaymentIntentResult {\n  payment_intent: any; // Stripe.PaymentIntent\n  client_secret: string;\n}\n\ninterface PaymentActionResult {\n  payment_intent?: any; // Stripe.PaymentIntent\n  refund?: any; // Stripe.Refund\n  amount_processed?: number;\n}\n\n/**\n * Stripe API Client Class\n * FIXED: Uses proper client-side approach with real backend API creation\n */\nexport class StripeAPIClient {\n  private baseURL: string;\n  private stripePromise: Promise<any> | null = null;\n\n  constructor(baseURL: string = resolveStripeFunctionBase()) {\n    this.baseURL = baseURL.replace(/\\/$/, '');\n  }\n\n\n\n  /**\n   * Get Stripe client instance\n   */\n  private async getStripe() {\n    if (!this.stripePromise) {\n      this.stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);\n    }\n\n    const stripe = await this.stripePromise;\n    if (!stripe) {\n      throw new Error('Failed to initialize Stripe client');\n    }\n\n    return stripe;\n  }\n\n  private async getAuthHeaders(): Promise<Record<string, string>> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n\n    try {\n      const { data, error } = await supabase.auth.getSession();\n      if (error) {\n        console.warn('[StripeAPIClient] Failed to fetch session for auth header', error);\n      }\n      const token = data?.session?.access_token;\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    } catch (error) {\n      console.warn('[StripeAPIClient] Unable to include auth header', error);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Create Payment Intent for Authorization Hold\n   * LIVE PAYMENTS ONLY: Creates payment intent via backend API - no fallback to mock\n   */\n  async createPaymentIntent(data: PaymentIntentData): Promise<PaymentIntentResult> {\n    try {\n      console.log('Creating LIVE Stripe Payment Intent via backend API');\n      console.log('Amount:', data.amount, 'CAD, Booking ID:', data.booking_id);\n\n      // Create payment intent via backend API endpoint (live payments only)\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${this.baseURL}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          action: 'createPaymentIntent',\n          amount: data.amount,\n          currency: data.currency,\n          capture_method: data.capture_method,\n          booking_id: data.booking_id,\n          user_id: data.user_id,\n          payment_method_id: data.payment_method_id\n        }),\n      });\n\n      // Require successful backend API response for live payments\n      const contentType = response.headers.get('content-type');\n      if (!response.ok || !contentType?.includes('application/json')) {\n        throw new Error('Backend API is required for live payments. Please ensure the backend is deployed and accessible.');\n      }\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to create payment intent');\n      }\n\n      console.log('âœ… LIVE Stripe Payment Intent created via backend!');\n      console.log('Payment Intent ID:', result.data.payment_intent.id);\n      console.log('Client Secret available for confirmation');\n      console.log('ðŸ”— This payment will appear in your Stripe dashboard!');\n\n      return {\n        payment_intent: result.data.payment_intent,\n        client_secret: result.data.client_secret\n      };\n\n    } catch (error) {\n      console.error('LIVE Payment API error:', error);\n      throw new Error(`Failed to create live payment: ${error.message || error}`);\n    }\n  }\n\n  /**\n   * REMOVED: Mock Payment Intent Creation\n   * Live payments only - no mock fallback system\n   */\n\n  /**\n   * Confirm Payment with Card Element\n   * LIVE PAYMENTS ONLY: Real Stripe payment confirmation only\n   */\n  async confirmPayment(clientSecret: string, cardElement: any, paymentMethodData?: any): Promise<any> {\n    try {\n      console.log('ðŸ”„ Confirming LIVE payment with Stripe...');\n      \n      const stripe = await this.getStripe();\n      \n      // Live Stripe payment confirmation only\n      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethodData || {\n          card: cardElement,\n        },\n      });\n\n      if (error) {\n        console.error('LIVE payment confirmation error:', error);\n        throw new Error(error.message);\n      }\n\n      console.log('âœ… LIVE payment confirmed successfully!');\n      console.log('Payment Intent ID:', paymentIntent.id);\n      console.log('Status:', paymentIntent.status);\n      console.log('Amount:', paymentIntent.amount_received / 100, paymentIntent.currency.toUpperCase());\n      console.log('ðŸ”— Payment visible in Stripe dashboard!');\n\n      return paymentIntent;\n\n    } catch (error) {\n      console.error('LIVE payment confirmation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Capture Payment Intent (Convert Authorization to Charge)\n   * LIVE PAYMENTS ONLY: Requires backend API for security\n   */\n  async capturePaymentIntent(\n    paymentIntentId: string,\n    amountToCapture?: number\n  ): Promise<PaymentActionResult> {\n    try {\n      console.log('Attempting to capture LIVE payment:', paymentIntentId);\n      \n      // Live payment capture via backend API only\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${this.baseURL}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          action: 'capturePaymentIntent',\n          payment_intent_id: paymentIntentId,\n          amount_to_capture: amountToCapture,\n        }),\n      });\n\n      const contentType = response.headers.get('content-type');\n      if (!response.ok || !contentType?.includes('application/json')) {\n        throw new Error('Backend API is required for live payment capture. Please ensure the backend is deployed and accessible.');\n      }\n\n      const result = await response.json();\n      \n      if (!result.success) {\n        throw new Error(result.error || 'Failed to capture payment');\n      }\n\n      console.log('âœ… LIVE payment captured via backend API');\n      console.log('Payment Intent ID:', result.data.payment_intent.id);\n      console.log('Amount captured:', (result.data.payment_intent.amount_received / 100), 'CAD');\n      return result.data;\n\n    } catch (error) {\n      console.error('LIVE payment capture error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel Payment Intent (Void Authorization)\n   * LIVE PAYMENTS ONLY: Requires backend API for security\n   */\n  async cancelPaymentIntent(\n    paymentIntentId: string,\n    cancellationReason?: string\n  ): Promise<PaymentActionResult> {\n    try {\n      console.log('Attempting to cancel LIVE payment:', paymentIntentId);\n      \n      // Live payment cancellation via backend API only\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${this.baseURL}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          action: 'cancelPaymentIntent',\n          payment_intent_id: paymentIntentId,\n          cancellation_reason: cancellationReason,\n        }),\n      });\n\n      const contentType = response.headers.get('content-type');\n      if (!response.ok || !contentType?.includes('application/json')) {\n        throw new Error('Backend API is required for live payment cancellation. Please ensure the backend is deployed and accessible.');\n      }\n\n      const result = await response.json();\n      \n      if (!result.success) {\n        throw new Error(result.error || 'Failed to cancel payment');\n      }\n\n      console.log('âœ… LIVE payment cancelled via backend API');\n      console.log('Payment Intent ID:', result.data.payment_intent.id);\n      console.log('Status:', result.data.payment_intent.status);\n      return result.data;\n\n    } catch (error) {\n      console.error('LIVE payment cancellation error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Refund for Captured Payment\n   * LIVE PAYMENTS ONLY: Requires backend API for security\n   */\n  async createRefund(\n    paymentIntentId: string,\n    amount?: number,\n    reason?: string\n  ): Promise<PaymentActionResult> {\n    try {\n      console.log('Attempting to refund LIVE payment:', paymentIntentId);\n      \n      // Live refund via backend API only\n      const headers = await this.getAuthHeaders();\n\n      const response = await fetch(`${this.baseURL}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          action: 'createRefund',\n          payment_intent_id: paymentIntentId,\n          amount: amount,\n          reason: reason,\n        }),\n      });\n\n      const contentType = response.headers.get('content-type');\n      if (!response.ok || !contentType?.includes('application/json')) {\n        throw new Error('Backend API is required for live payment refunds. Please ensure the backend is deployed and accessible.');\n      }\n\n      const result = await response.json();\n      \n      if (!result.success) {\n        throw new Error(result.error || 'Failed to create refund');\n      }\n\n      console.log('âœ… LIVE refund created via backend API');\n      console.log('Refund ID:', result.data.refund.id);\n      console.log('Amount refunded:', (result.data.refund.amount / 100), 'CAD');\n      return result.data;\n\n    } catch (error) {\n      console.error('LIVE refund creation error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve Payment Intent\n   * LIVE PAYMENTS ONLY: Requires backend implementation for security\n   */\n  async getPaymentIntent(paymentIntentId: string): Promise<PaymentIntentResult> {\n    try {\n      console.log('Retrieving LIVE payment intent:', paymentIntentId);\n\n      // Note: Client-side can only retrieve payment intents with client secret\n      // This is mainly for status checking after confirmation\n      throw new Error('Payment intent retrieval requires backend implementation for security');\n\n    } catch (error) {\n      console.error('Error retrieving LIVE payment intent:', error);\n      throw error;\n    }\n  }\n}\n\n// Create singleton instance\nexport const stripeAPIClient = new StripeAPIClient();\n\n// Export types for use in other files\nexport type {\n  PaymentIntentData,\n  PaymentIntentResult,\n  PaymentActionResult,\n};"],"names":["supabaseRestUrl","resolveStripeFunctionBase","StripeAPIClient","baseURL","loadStripe","stripe","headers","data","error","supabase","token","response","contentType","result","clientSecret","cardElement","paymentMethodData","paymentIntent","paymentIntentId","amountToCapture","cancellationReason","amount","reason","stripeAPIClient"],"mappings":"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"}