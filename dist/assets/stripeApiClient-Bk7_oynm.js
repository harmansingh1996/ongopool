import{l as c,s as l}from"./index-BjIU3QGL.js";const i="https://etgamovacurbdbxzrvqc.supabase.co".trim()?.replace(/\/$/,""),d=()=>i?`${i}/functions/v1/stripe-payments`:(console.warn("[StripeAPIClient] Missing Supabase configuration. Falling back to relative function path."),"/functions/v1/stripe-payments");class p{baseURL;stripePromise=null;constructor(e=d()){this.baseURL=e.replace(/\/$/,"")}async getStripe(){this.stripePromise||(this.stripePromise=c("pk_test_51S5wub3Cz2UGWP4DlGSffOgjNoiuVm6OJAQsaO8EJ6ek5lEUQfUjqiqE4JDaDlStaNPJ0b6LUboX4jtLJKtsVcEz00cfGGSU4D"));const e=await this.stripePromise;if(!e)throw new Error("Failed to initialize Stripe client");return e}async getAuthHeaders(){const e={"Content-Type":"application/json"};try{const{data:n,error:r}=await l.auth.getSession();r&&console.warn("[StripeAPIClient] Failed to fetch session for auth header",r);const t=n?.session?.access_token;t&&(e.Authorization=`Bearer ${t}`)}catch(n){console.warn("[StripeAPIClient] Unable to include auth header",n)}return e}async createPaymentIntent(e){try{console.log("Creating LIVE Stripe Payment Intent via backend API"),console.log("Amount:",e.amount,"CAD, Booking ID:",e.booking_id);const n=await this.getAuthHeaders(),r=await fetch(`${this.baseURL}`,{method:"POST",headers:n,body:JSON.stringify({action:"createPaymentIntent",amount:e.amount,currency:e.currency,capture_method:e.capture_method,booking_id:e.booking_id,user_id:e.user_id,payment_method_id:e.payment_method_id})}),t=r.headers.get("content-type");if(!r.ok||!t?.includes("application/json"))throw new Error("Backend API is required for live payments. Please ensure the backend is deployed and accessible.");const a=await r.json();if(!a.success)throw new Error(a.error||"Failed to create payment intent");return console.log("âœ… LIVE Stripe Payment Intent created via backend!"),console.log("Payment Intent ID:",a.data.payment_intent.id),console.log("Client Secret available for confirmation"),console.log("ðŸ”— This payment will appear in your Stripe dashboard!"),{payment_intent:a.data.payment_intent,client_secret:a.data.client_secret}}catch(n){throw console.error("LIVE Payment API error:",n),new Error(`Failed to create live payment: ${n.message||n}`)}}async confirmPayment(e,n,r){try{console.log("ðŸ”„ Confirming LIVE payment with Stripe...");const t=await this.getStripe(),{error:a,paymentIntent:o}=await t.confirmCardPayment(e,{payment_method:r||{card:n}});if(a)throw console.error("LIVE payment confirmation error:",a),new Error(a.message);return console.log("âœ… LIVE payment confirmed successfully!"),console.log("Payment Intent ID:",o.id),console.log("Status:",o.status),console.log("Amount:",o.amount_received/100,o.currency.toUpperCase()),console.log("ðŸ”— Payment visible in Stripe dashboard!"),o}catch(t){throw console.error("LIVE payment confirmation failed:",t),t}}async capturePaymentIntent(e,n){try{console.log("Attempting to capture LIVE payment:",e);const r=await this.getAuthHeaders(),t=await fetch(`${this.baseURL}`,{method:"POST",headers:r,body:JSON.stringify({action:"capturePaymentIntent",payment_intent_id:e,amount_to_capture:n})}),a=t.headers.get("content-type");if(!t.ok||!a?.includes("application/json"))throw new Error("Backend API is required for live payment capture. Please ensure the backend is deployed and accessible.");const o=await t.json();if(!o.success)throw new Error(o.error||"Failed to capture payment");return console.log("âœ… LIVE payment captured via backend API"),console.log("Payment Intent ID:",o.data.payment_intent.id),console.log("Amount captured:",o.data.payment_intent.amount_received/100,"CAD"),o.data}catch(r){throw console.error("LIVE payment capture error:",r),r}}async cancelPaymentIntent(e,n){try{console.log("Attempting to cancel LIVE payment:",e);const r=await this.getAuthHeaders(),t=await fetch(`${this.baseURL}`,{method:"POST",headers:r,body:JSON.stringify({action:"cancelPaymentIntent",payment_intent_id:e,cancellation_reason:n})}),a=t.headers.get("content-type");if(!t.ok||!a?.includes("application/json"))throw new Error("Backend API is required for live payment cancellation. Please ensure the backend is deployed and accessible.");const o=await t.json();if(!o.success)throw new Error(o.error||"Failed to cancel payment");return console.log("âœ… LIVE payment cancelled via backend API"),console.log("Payment Intent ID:",o.data.payment_intent.id),console.log("Status:",o.data.payment_intent.status),o.data}catch(r){throw console.error("LIVE payment cancellation error:",r),r}}async createRefund(e,n,r){try{console.log("Attempting to refund LIVE payment:",e);const t=await this.getAuthHeaders(),a=await fetch(`${this.baseURL}`,{method:"POST",headers:t,body:JSON.stringify({action:"createRefund",payment_intent_id:e,amount:n,reason:r})}),o=a.headers.get("content-type");if(!a.ok||!o?.includes("application/json"))throw new Error("Backend API is required for live payment refunds. Please ensure the backend is deployed and accessible.");const s=await a.json();if(!s.success)throw new Error(s.error||"Failed to create refund");return console.log("âœ… LIVE refund created via backend API"),console.log("Refund ID:",s.data.refund.id),console.log("Amount refunded:",s.data.refund.amount/100,"CAD"),s.data}catch(t){throw console.error("LIVE refund creation error:",t),t}}async getPaymentIntent(e){try{throw console.log("Retrieving LIVE payment intent:",e),new Error("Payment intent retrieval requires backend implementation for security")}catch(n){throw console.error("Error retrieving LIVE payment intent:",n),n}}}const y=new p;export{p as StripeAPIClient,y as stripeAPIClient};
//# sourceMappingURL=stripeApiClient-Bk7_oynm.js.map
