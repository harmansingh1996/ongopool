import{s as i,P as d}from"./index-BjIU3QGL.js";class m{static async checkCancellationEligibility(r,n){try{const{data:e,error:t}=await i.from("ride_bookings").select(`
          *,
          rides (*)
        `).eq("id",r).single();if(t||!e)return{canCancel:!1,reason:"Booking not found"};const a=e.passenger_id===n,s=e.rides.driver_id===n;if(!a&&!s)return{canCancel:!1,reason:"You are not authorized to cancel this booking"};const o=new Date,c=(new Date(e.rides.departure_time).getTime()-o.getTime())/(1e3*60*60);if(e.status==="cancelled")return{canCancel:!1,reason:"Booking is already cancelled"};if(e.status==="rejected")return{canCancel:!1,reason:"Booking was already rejected"};if(e.status==="pending")return{canCancel:!0,reason:"Pending booking can be cancelled with full refund",refundAmount:e.total_amount,cancellationFee:0,timeToRide:c};if(e.status==="confirmed"){const l=this.calculateRefundAmount(e.total_amount,c);return c<=-2?{canCancel:!1,reason:"Cannot cancel completed rides"}:{canCancel:!0,reason:this.getCancellationPolicyMessage(c),refundAmount:l.refundAmount,cancellationFee:l.cancellationFee,timeToRide:c}}return{canCancel:!1,reason:"Booking cannot be cancelled at this time"}}catch(e){return console.error("Error checking cancellation eligibility:",e),{canCancel:!1,reason:"Error checking cancellation eligibility"}}}static calculateRefundAmount(r,n){let e;n>=12?e=100:n>=6?e=75:n>=2?e=50:n>=0?e=25:e=0;const t=Math.round(r*e/100*100)/100,a=Math.round((r-t)*100)/100;return{refundAmount:t,cancellationFee:a}}static getCancellationPolicyMessage(r){return r>=12?"Free cancellation - No cancellation fee (12+ hours before departure)":r>=6?"Cancellation fee: 25% of ride cost (6-12 hours before departure)":r>=2?"Cancellation fee: 50% of ride cost (2-6 hours before departure)":r>=0?"Cancellation fee: 75% of ride cost (less than 2 hours before departure)":"No refund available for completed rides"}static async cancelBooking(r,n){try{const e=await this.checkCancellationEligibility(r,n);if(!e.canCancel)return{success:!1,refunded:!1,error:e.reason};const{data:t,error:a}=await i.from("ride_bookings").select(`
          *,
          rides (*)
        `).eq("id",r).single();if(a||!t)return{success:!1,refunded:!1,error:"Booking not found"};let s=null;t.status==="pending"?s=await d.refundPaymentHold(r,"passenger_cancelled"):t.status==="confirmed"&&e.refundAmount>0&&(s=await this.processPartialRefund(r,e.refundAmount,e.cancellationFee));const{error:o}=await i.from("ride_bookings").update({status:"cancelled",updated_at:new Date().toISOString()}).eq("id",r);return o?(console.error("Error updating booking status:",o),{success:!1,refunded:!1,error:"Failed to update booking status"}):(await this.sendCancellationMessage(r,t.ride_id,n,"passenger_cancelled",e.refundAmount,e.cancellationFee),{success:!0,refunded:e.refundAmount>0,refundAmount:e.refundAmount,cancellationFee:e.cancellationFee,reason:"Booking cancelled successfully"})}catch(e){return console.error("Error cancelling booking:",e),{success:!1,refunded:!1,error:"An error occurred while cancelling the booking"}}}static async processPartialRefund(r,n,e){try{const{data:t}=await i.from("ride_bookings").select("passenger_id, total_amount").eq("id",r).single();if(!t)return null;const{data:a,error:s}=await i.from("payments").insert({booking_id:r,user_id:t.passenger_id,amount:-n,currency:"USD",status:"refunded",payment_method:"refund",refund_reason:"passenger_cancelled_with_fee",refunded_at:new Date().toISOString(),created_at:new Date().toISOString()}).select().single();return s&&console.error("Error creating refund payment record:",s),e>0&&await i.from("payments").insert({booking_id:r,user_id:t.passenger_id,amount:e,currency:"USD",status:"captured",payment_method:"cancellation_fee",created_at:new Date().toISOString()}),a}catch(t){return console.error("Error processing partial refund:",t),null}}static async requestCancellationException(r,n,e){try{const{data:t,error:a}=await i.from("support_tickets").insert({user_id:n,subject:`Cancellation Exception Request - Booking #${r}`,description:`User is requesting an exception to cancel confirmed booking #${r}.

Justification: ${e}`,category:"cancellation_exception",priority:"medium",status:"open"}).select().single();if(a)throw a;return{success:!0,ticketId:t.id}}catch(t){return console.error("Error creating cancellation exception request:",t),{success:!1,error:"Failed to submit cancellation exception request"}}}static async grantCancellationException(r){try{const{error:n}=await i.from("ride_bookings").update({can_cancel_after_confirm:!0}).eq("id",r);if(n)throw n;return{success:!0,refunded:!1,reason:"Cancellation exception granted. Booking can now be cancelled."}}catch(n){return console.error("Error granting cancellation exception:",n),{success:!1,refunded:!1,error:"Failed to grant cancellation exception"}}}static async sendCancellationMessage(r,n,e,t,a,s){try{let o="";switch(t){case"passenger_cancelled":a&&a>0?s&&s>0?o=`Passenger cancelled the booking. Refund of $${a.toFixed(2)} will be processed (cancellation fee: $${s.toFixed(2)}).`:o=`Passenger cancelled the booking. Full refund of $${a.toFixed(2)} will be processed.`:o="Passenger cancelled the booking. No refund applicable.";break;case"driver_cancelled":o="Driver cancelled the ride. Full refund will be processed automatically.";break;case"timeout":o="Booking expired due to no driver response. Full refund processed automatically.";break;default:o="Booking has been cancelled."}await i.from("messages").insert({booking_id:r,sender_id:e,message:o,is_system_message:!0})}catch(o){console.error("Error sending cancellation message:",o)}}static async isRideCompleted(r){try{const{data:n}=await i.from("rides").select("status, departure_time, arrival_time").eq("id",r).single();if(!n)return!1;if(n.status==="completed")return!0;const e=new Date,t=new Date(n.departure_time);return(e.getTime()-t.getTime())/(1e3*60*60)>6}catch(n){return console.error("Error checking ride completion:",n),!1}}static async processAutomaticRefunds(){try{const{data:r}=await i.from("ride_bookings").select(`
          *,
          rides (departure_time, driver_id)
        `).eq("status","pending").lt("response_deadline",new Date().toISOString());for(const n of r||[])await d.refundPaymentHold(n.id,"timeout");console.log(`Processed ${r?.length||0} expired booking refunds`)}catch(r){console.error("Error processing automatic refunds:",r)}}}export{m as BookingPolicyService};
//# sourceMappingURL=bookingPolicyService-CJMSbO6A.js.map
